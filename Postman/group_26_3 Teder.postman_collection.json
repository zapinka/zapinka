{
	"info": {
		"_postman_id": "766186ad-0244-4c9c-b62b-e4f811643aef",
		"name": "group_26_3 Teder",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.environment.set(\"token1\", jsonData.token);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "zxc",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  1 Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"var req = JSON.parse(request.data);\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"pm.test('Schema is valid', function() {\r",
							"    var resp = pm.response.json();\r",
							"    var correct=tv4.validate(resp, schema, true, true)\r",
							"    pm.expect(correct).to.be.true\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"   pm.expect(req.salary).to.eql(jsonData.start_qa_salary); \r",
							"});\r",
							"pm.test(\"qa_salary_after_6_months\", function (){\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months\", function (){\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary*2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"u_salary_1_5_year\", function (){\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(req.salary*4);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"salary_1\", jsonData.person.u_salary_1_5_year);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Alex\",\r\n    \"age\": 27,\r\n    \"salary\": 9999,\r\n    \"auth_token\": \"{{token1}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{kek}}/user_info",
					"host": [
						"{{kek}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code is 200\", function (){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"let schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"    var resp = pm.response.json();\r",
							"    var correct=tv4.validate(resp, schema, true, true)\r",
							"    pm.expect(correct).to.be.true\r",
							"});\r",
							"\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let reqData = request.data;\r",
							"\r",
							"pm.test(\"tes_1\", () => {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+reqData.salary);\r",
							"    });\r",
							"\r",
							"pm.test(\"test_2\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(reqData.salary*2);\r",
							"    });\r",
							"\r",
							"pm.test(\"test_3\", function (){\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(reqData.salary*3);\r",
							"    });\r",
							"\r",
							"pm.test(\"above\",  () => {\r",
							"    pm.expect(+jsonData.salary[2]).to.be.above(+jsonData.salary[1]);\r",
							"    });\r",
							"\r",
							"pm.test(\"above_1\", function (){\r",
							"    pm.expect(+jsonData.salary[2]).to.be.above(jsonData.salary[0]);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token1}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{Moy_salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{Moy_name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{Moy_age}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"pm.test('Schema is valid', function() {\r",
							"    var resp = pm.response.json();\r",
							"    var correct=tv4.validate(resp, schema, true, true)\r",
							"    pm.expect(correct).to.be.true\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let reqData = request.data;\r",
							"\r",
							"let ves = request.data.weight;\r",
							"// console.log(ves);\r",
							"\r",
							"pm.test(\"ves_eda\", function (){\r",
							"    pm.expect(jsonData.daily_food).to.eql(reqData.weight*0.012);\r",
							"});\r",
							"\r",
							"pm.test(\"ves.v2_eda\", function (){\r",
							"    pm.expect(jsonData.daily_food).to.eql(ves*0.012);\r",
							"});\r",
							"\r",
							"pm.test(\"sleep\", function (){\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(ves*2.5);\r",
							"});\r",
							"\r",
							"pm.test(\"sleep_2\", function (){\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(reqData.weight*2.5);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token1}}"
						},
						{
							"key": "name",
							"value": "{{Moy_name}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "66",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{Moy_age}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// pm.environment.get(\"Moy_name\");\r",
							"\r",
							"// pm.variables.get(\"Moy_name\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"let schema = {\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"    var resp = pm.response.json();\r",
							"    var correct=tv4.validate(resp, schema, true, true)\r",
							"    pm.expect(correct).to.be.true\r",
							"});\r",
							"\r",
							"let resData = pm.response.json();\r",
							"console.log(resData);\r",
							"\r",
							"pm.test(\"name\", function (){\r",
							"    pm.expect(resData.name).to.eql(pm.environment.get(\"Moy_name\"));\r",
							"});\r",
							"\r",
							"pm.test(\"age\", function (){\r",
							"    pm.expect(resData.age).to.eql(pm.environment.get(\"Moy_age\"));\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{Moy_age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{Moy_salary}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token1}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{Moy_name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"let massiv = jsonData;\r",
							"// console.log(massiv);\r",
							"\r",
							"var result = massiv.filter(function( obj ) {\r",
							"  return obj.Cur_ID == 6;\r",
							"});\r",
							"console.log(result);\r",
							"\r",
							"let resultOne = massiv.find(function(item,index,array){\r",
							"    return item.Cur_ID === 2;\r",
							"})\r",
							"console.log(resultOne);\r",
							"\r",
							"let resulTwo = massiv.findIndex(item => item[1] === 1);\r",
							"console.log(resulTwo);\r",
							"\r",
							"function Cur() {\r",
							"    return {\r",
							"        massiv\r",
							"    };\r",
							"}\r",
							"let Cur_ID_show = Cur();\r",
							"console.log(Cur_ID_show);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "\"/s34lfgbj/Alina/jjd909/95718kjkWpqc28891234280082evny\"",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/currency",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "/curr_byn",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "\"/s34lfgbj/Alina/jjd909/95718kjkWpqc28891234280082evny\""
						},
						{
							"key": "curr_code",
							"value": "451"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}