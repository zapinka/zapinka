{
	"info": {
		"_postman_id": "6d8fcdd5-480c-4412-9dce-f5bec5d2a43d",
		"name": "group_26_2 Teder Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"//  Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Type of responce is string\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.a('string');\r",
							"    })\r",
							"\r",
							"//  Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"text\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"pm.test(\"Correct string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function ()  {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"// console.log(jsonData);\r",
							"\r",
							"//  Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"test name rykamu\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Alex\");\r",
							"});\r",
							"\r",
							"//  Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"test age rykamu\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"27\");\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"test salary rykamu\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(9999);\r",
							"});\r",
							"\r",
							"// Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"test name request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//  Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"test age request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"test salary request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(\"SMOTR SUDA\",jsonData.family);\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"chek u_salary_1_5_year\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req.salary*4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "9999",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//  Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log( \"CHEK\" ,jsonData.family);\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"\r",
							"console.log(\"----dog_name\",jsonData.family.pets.dog.name);\r",
							"\r",
							"pm.test(\"chek dog_name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//  Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"dog_age = jsonData.family.pets.dog.age;\r",
							"console.log(\"-----dog_age\",dog_age);\r",
							"\r",
							"pm.test(\"dog_age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog_name_Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.be.oneOf([\"Luky\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Dog have Luky\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.include(\"Luky\")\r",
							"});\r",
							"\r",
							"//  Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog_age_4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.be.oneOf([4]);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?salary=9999&name=Alex&age=27&",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "salary",
							"value": "9999"
						},
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"// // Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// // Спарсить request.\r",
							"\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"// // Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name в ответе равно name s request\", function (){\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// // Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age в ответе равно age из request\", function (){\r",
							"    pm.expect(jsonData.age).to.eql(+req.age)\r",
							"});\r",
							"\r",
							"// // Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary в ответе равно salary s request\", function (){\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// //  Вывести в консоль параметр salary из request.\r",
							"console.log(\"SALARY IZ Rquest\",jsonData.salary);\r",
							"\r",
							"// //  Вывести в консоль параметр salary из response.\r",
							"console.log(\"SALARY IZ Response\",req.salary);\r",
							"\r",
							"\r",
							"// //  Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"// console.log(\"в консоль 0-й элемент параметра salary\",jsonData.salary[0]);\r",
							"\r",
							"let salary_0 = jsonData.salary[0]\r",
							"console.log(salary_0);\r",
							"\r",
							"// // Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"// console.log(\"в консоль 1-й элемент параметра salary\",jsonData.salary[1]);\r",
							"\r",
							"let salary_1 = jsonData.salary[1]\r",
							"console.log(salary_1);\r",
							"\r",
							"\r",
							"// // Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"// console.log(\"в консоль 2-й элемент параметра salary\",jsonData.salary[2]);\r",
							"\r",
							"let salary_2 = jsonData.salary[2]\r",
							"console.log(salary_2);\r",
							"\r",
							"// // Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary_0\", function (){\r",
							"    pm.expect(salary_0).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"saslary_0_dop\",function (){\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// // Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary_1\", function (){\r",
							"    pm.expect(+salary_1).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"pm.test(\"salary_1_dop\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"// // Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Salary_2\", function () {\r",
							"    pm.expect(+salary_2).to.eql(req.salary*3);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary_2_dop\", function (){\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(req.salary*3);\r",
							"});\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"let name = pm.response.json().name;\r",
							"// console.log(\"name\",name);\r",
							"// Создать в окружении переменную age\r",
							"let age = pm.response.json().age;\r",
							"// console.log(\"age\",age);\r",
							"// Создать в окружении переменную salary\r",
							"let salary=pm.response.json().salary[0];\r",
							"// console.log(\"salary\",salary);\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set(\"my_name\",name);\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set(\"my_age\",age);\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"my_salary\",salary);\r",
							"// // Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (bla = 0; bla < jsonData.salary.length; bla++){\r",
							"console.log(\"cyclу\", jsonData.salary[bla]);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?salary=9999&name=Alex&age=27",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "salary",
							"value": "9999"
						},
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "27"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"let req = request.data;\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\",\r",
							"pm.test(\"start_qa_salary\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"person\", () => {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months равен salary*2\", function ()  {\r",
							"   pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary*2); \r",
							"});\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months равен salary*2\", function () {\r",
							"   pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary*2.7); \r",
							"});\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\" qa_salary_after_1.5_year равен salary*3.3\", () => {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3)\r",
							"});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years равен salary*3.8\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req.salary*3.8)\r",
							"});\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"параметре person, 1-й элемент из u_name равен salary из request\", function (){\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"параметр u_age равен age из request\", function (){\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"параметр u_salary_5_years равен salary*4.2 из request\", function (){\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+req.salary*4.2);\r",
							"});\r",
							"\r",
							"\r",
							"for (let abracadabra in jsonData.person){\r",
							"console.log(\"smotrim:\", abracadabra, \"4to:\",jsonData.person[abracadabra]);\r",
							"};\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{my_salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{my_name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{my_age}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}